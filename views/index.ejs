<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title><%= title %></title>
  <link rel="stylesheet" href="/stylesheets/style.css">
  <script src="polymer/PointerGestures/pointergestures.js"></script>
</head>
<body touch-action="none">
  <div id="log"> 
	<!DOCTYPE html>
	<html>
	<%- include header %>
	<%- include footer %>
  </div>
  
  <div id="real"></div>
  <div id="ghost"></div>
  <div id="ghostghost"></div>

  <script>
    function translate(el, x, y) {
      x = Math.max(0, x - 50); y = Math.max(0, y - 50);
      el.style.transfomrm = el.style.webkitTransform = 'translateX(' + x + 'px) translateY(' + y + 'px)';
    }
    real.addEventListener('track', function(e) {
      requestAnimationFrame(function() {
        translate(real, e.clientX, e.clientY);
        translate(ghost, e.clientX - e.ddx, e.clientY - e.ddy);
        translate(ghostghost, e.clientX - e.dx, e.clientY - e.dy);
      });
    });
  </script>

  <canvas id="debug" style="position:absolute; left:100px"></canvas>
  <script src="threejs/build/three.min.js"></script>
  <script src="threejs/examples/js/libs/stats.min.js"></script>
	
  <script>

			var container, stats;

			var camera, scene, renderer;

			var text, plane;

			var targetRotation = 0;
			var targetRotationOnMouseDown = 0;

			var mouseX = 0;
			var mouseXOnMouseDown = 0;

			var windowHalfX = window.innerWidth / 2;
			var windowHalfY = window.innerHeight / 2;

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.body.appendChild( container );

				camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.set( 0, 150, 500 );

				scene = new THREE.Scene();

				var light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 0, 0, 1 );
				scene.add( light );

				parent = new THREE.Object3D();
				parent.position.y = 50;
				scene.add( parent );

				function addShape( shape, extrudeSettings, color, x, y, z, rx, ry, rz, s ) {

					var points = shape.createPointsGeometry();
					var spacedPoints = shape.createSpacedPointsGeometry( 100 );

					// flat shape

					var geometry = new THREE.ShapeGeometry( shape );

					var mesh = THREE.SceneUtils.createMultiMaterialObject( geometry, [ new THREE.MeshLambertMaterial( { color: color } ), new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true, transparent: true } ) ] );
					mesh.position.set( x, y, z - 125 );
					mesh.rotation.set( rx, ry, rz );
					mesh.scale.set( s, s, s );
					parent.add( mesh );

					// 3d shape

					var geometry = new THREE.ExtrudeGeometry( shape, extrudeSettings );

					var mesh = THREE.SceneUtils.createMultiMaterialObject( geometry, [ new THREE.MeshLambertMaterial( { color: color } ), new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true, transparent: true } ) ] );
					mesh.position.set( x, y, z - 75 );
					mesh.rotation.set( rx, ry, rz );
					mesh.scale.set( s, s, s );
					parent.add( mesh );

					// solid line

					var line = new THREE.Line( points, new THREE.LineBasicMaterial( { color: color, linewidth: 2 } ) );
					line.position.set( x, y, z + 25 );
					line.rotation.set( rx, ry, rz );
					line.scale.set( s, s, s );
					parent.add( line );
				}
				// Spline shape + path extrusion

				var splinepts = [];
				splinepts.push( new THREE.Vector2 ( 350, 100 ) );
				splinepts.push( new THREE.Vector2 ( 400, 450 ) );
				splinepts.push( new THREE.Vector2 ( -140, 350 ) );
				splinepts.push( new THREE.Vector2 ( 0, 0 ) );

				var splineShape = new THREE.Shape(  );
				splineShape.moveTo( 0, 0 );
				splineShape.splineThru( splinepts );

				// splineShape.debug( document.getElementById("debug") );

				// TODO 3d path?

				var apath = new THREE.SplineCurve3();
				apath.points.push(new THREE.Vector3(-50, 150, 10));
				apath.points.push(new THREE.Vector3(-20, 180, 20));
				apath.points.push(new THREE.Vector3(40, 220, 50));
				apath.points.push(new THREE.Vector3(200, 290, 100));


				var extrudeSettings = { amount: 20 }; // bevelSegments: 2, steps: 2 , bevelSegments: 5, bevelSize: 8, bevelThickness:5

				// addShape( shape, color, x, y, z, rx, ry,rz, s );
				extrudeSettings.extrudePath = apath;
				extrudeSettings.bevelEnabled = false;
				extrudeSettings.steps = 20;

				addShape( splineShape, extrudeSettings, 0x888888, -50, 100, -50, 0, 0, 0, 0.2 );
				//
				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setSize( window.innerWidth, window.innerHeight );

				container.appendChild( renderer.domElement );

				stats = new Stats();
				//stats.domElement.style.position = 'absolute';
				//stats.domElement.style.top = '0px';
				//container.appendChild( stats.domElement );
				//
				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				windowHalfX = window.innerWidth / 2;
				windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}
			//
			function animate() {

				requestAnimationFrame( animate );

				render();
				stats.update();

			}

			function render() {

				parent.rotation.y += ( targetRotation - parent.rotation.y ) * 0.05;
				renderer.render( scene, camera );

			}

		</script>
</body>
</html>
